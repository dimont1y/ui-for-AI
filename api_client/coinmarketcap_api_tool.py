import requests

from apis.config import COINMARKETCAP_API_KEY

from agents import function_tool

BASE_URL = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest'

@function_tool
def get_crypto_data(symbol:str):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∑–∞ —Å–∏–º–≤–æ–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTC, ETH, DOGE)"""
    headers = {'Accepts': 'application/json', 'X-CMC_PRO_API_KEY': COINMARKETCAP_API_KEY}
    params = {'symbol': symbol.upper(), 'convert': 'USD'}  # upper() —â–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–æ —ñ –∑ "btc", —ñ –∑ "BTC"

    try:
        response = requests.get(BASE_URL, headers=headers, params=params)
        response.raise_for_status()  # –í–∏–∫–ª–∏—á–µ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –ø–æ–≥–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        data = response.json()

        if 'data' in data and symbol.upper() in data['data']:
            crypto = data['data'][symbol.upper()]['quote']['USD']
            return {
                'symbol': symbol.upper(),
                'price': crypto['price'],
                '1h_change': crypto['percent_change_1h'],
                '24h_change': crypto['percent_change_24h'],
                '7d_change': crypto['percent_change_7d'],
                'market_cap': crypto['market_cap'],
                'volume_24h': crypto['volume_24h'],
                'circulating_supply': data['data'][symbol.upper()]['circulating_supply']
            }
        else:
            return {'error': f'–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞'}

    except requests.exceptions.RequestException as e:
        return {'error': f'–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {str(e)}'}

@function_tool
def compare_crypto_data(symbol1: str, symbol2: str):
    """–ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –¥–≤—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ –∑–∞ —Å–∏–º–≤–æ–ª–∞–º–∏, –ø–æ–≤–µ—Ä—Ç–∞—î –æ—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏"""
    symbols = f"{symbol1.upper()},{symbol2.upper()}"
    headers = {'Accepts': 'application/json', 'X-CMC_PRO_API_KEY': COINMARKETCAP_API_KEY}
    params = {'symbol': symbols, 'convert': 'USD'}

    try:
        response = requests.get(BASE_URL, headers=headers, params=params)
        response.raise_for_status()
        data = response.json().get("data", {})

        result = {}
        for sym in [symbol1.upper(), symbol2.upper()]:
            if sym in data:
                quote = data[sym]['quote']['USD']
                result[sym] = {
                    'price': quote['price'],
                    '1h_change': quote['percent_change_1h'],
                    '24h_change': quote['percent_change_24h'],
                    '7d_change': quote['percent_change_7d'],
                    'market_cap': quote['market_cap'],
                    'volume_24h': quote['volume_24h'],
                    'circulating_supply': data[sym]['circulating_supply']
                }
            else:
                result[sym] = {'error': f'{sym} not found'}

        return result

    except requests.exceptions.RequestException as e:
        return {'error': f'Request error: {str(e)}'}

@function_tool
def get_historical_data(symbol: str, days: int):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä–∏—á–Ω—É –¥–∏–Ω–∞–º—ñ–∫—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ –∑–∞ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤."""
    headers = {'Accepts': 'application/json', 'X-CMC_PRO_API_KEY': COINMARKETCAP_API_KEY}
    params = {'symbol': symbol.upper(), 'convert': 'USD', 'timespan': f'{days}d'}

    try:
        response = requests.get(BASE_URL, headers=headers, params=params)
        response.raise_for_status()
        data = response.json()

        if 'data' in data:
            historical_prices = data['data']['prices']
            return historical_prices
        else:
            return {'error': f'–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è {symbol} –∑–∞ {days} –¥–Ω—ñ–≤.'}

    except requests.exceptions.RequestException as e:
        return {'error': f'–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {str(e)}'}

# üîπ –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
if __name__ == "__main__":
    crypto = input("–í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, BTC, ETH, DOGE): ").strip()
    print(get_crypto_data(crypto))